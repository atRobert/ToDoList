{"version":3,"sources":["welcome.js","localStorageProjects.js","project-description/project-task/ProjectTask.js","project-description/ProjectDescription.js","project-list/project-list.js","index.js"],"names":["welcomeJSON","getCurrentProject","projectTitle","currentProject","window","localStorage","getItem","JSON","parse","getFirstProject","key","initiateFirstProject","length","projectDetail","stringify","setItem","buildWelcomeProject","saveCurrentProject","project","title","buildProjectInfo","projectList","Object","entries","map","entry","projectInfo","i","push","ProjectTask","props","state","isHover","isHoveringComplete","mouseHoverTaskContainerHandler","bind","mouseHoverTaskCheckHandler","removeTaskFromProject","toggleTaskComplete","hovering","this","setState","projectDetails","currentProjectTasks","tasks","index","findIndex","task","taskTitle","currentProjectTaskComplete","complete","addTaskToProjectHandler","sendUpdatedTaskList","splice","updateSelectedTasksHandler","hoveringTask","taskComplete","className","taskDescription","icon","faCheck","onMouseEnter","onMouseLeave","onClick","taskPriority","faTimes","React","Component","ProjectTaskList","addTaskHandler","event","objMap","document","getElementById","value","description","priority","id","Math","random","toString","substr","taskList","preventDefault","taskFormHandler","adding_task","current_project","selectedTasks","showForm","addTask","projectTasks","type","rows","console","log","taskID","faCircle","faPlusCircle","ProjectDescription","selectedProjectDetail","ProjectTitle","ProjectDetail","toggleProjectComplete","selectedProject","isProjectComplete","projectComplete","ProjectList","deleteProjectHandler","projectID","removeItem","projects","data","addNewProject","addProjectHandler","removeProjectHandler","updateSelectedProject","updateSelectedProjectHandler","ProjectListItem","projectStatus","CreateProject","adding_project","projectFormHandler","projectAddHandler","newProjectTitle","newProjectDescription","addProject","WindowFrame","projectDescription","updateTasksInProjectHandler","currentTasks","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.b355cc08.chunk.js","sourcesContent":["const welcomeJSON = {\n    \"title\": \"Welcome!\",\n    \"id\": \"SddsfdFds\",\n    \"complete\": false,\n    \"active\": false,\n    \"description\": \"Welcome to my React Task Manager!\",\n    \"tasks\": [\n        {\n            \"title\": \"Hover over me!\",\n            \"description\": \"You can hover over tasks to see more notes about the specific task!\",\n            \"priority\": \"High\",\n            \"id\": \"hoverTaskID\"\n            },\n        {\n        \"title\": \"Add a project!\",\n        \"description\": \"Click the add project button to add a project! Projects should have a simple title, with a more in depth description. Each project can have several tasks associated with them. Each project can also be marked complete when you're finished!\",\n        \"priority\": \"High\",\n        \"id\": \"addProjectID\"\n        },\n        {\n            \"title\": \"Add Task\",\n            \"priority\": \"High\",\n            \"description\": \"To add a task to your project, click the plus to the left of 'Task'. Each task can have it's own set of notes, that can be seen when the task is hovered. Tasks can also be marked completed as well removed if they're no longe necessary.\",\n            \"id\": \"addTaskID\"\n        }\n    ]\n}\n\nexport {welcomeJSON}\n","import {welcomeJSON} from './welcome.js'\n\n\nfunction getCurrentProject(projectTitle) {\nlet currentProject = window.localStorage.getItem(projectTitle);\ncurrentProject = JSON.parse(currentProject);\nreturn currentProject;\n}\n\nfunction getFirstProject() {\nreturn window.localStorage.key(0);\n}\n\nfunction buildWelcomeProject() {\nlet projectDetail = JSON.stringify(welcomeJSON)\nwindow.localStorage.setItem(\"Welcome!\", projectDetail);\nreturn getFirstProject();\n}\n\nfunction initiateFirstProject() {\nif (window.localStorage.length > 0) {\n    return getFirstProject();\n}\nreturn buildWelcomeProject();\n}\n\nfunction saveCurrentProject(project) {\nlet projectTitle = project.title;\nlet projectDetail = JSON.stringify(project);\nwindow.localStorage.setItem(projectTitle, projectDetail);\n}\n\nfunction getProjectList() {\nlet localStorageEntries = Object.entries(window.localStorage);\nlet projectTitles = localStorageEntries.map(entry => entry[0]);\nreturn projectTitles;\n}\n\nfunction buildProjectInfo() {\nlet projectList = getProjectList();\nlet projectInfo = [];\nfor (let i = 0; i < projectList.length; i++) {\n    projectInfo.push(getCurrentProject(projectList[i]));\n}\nreturn projectInfo;\n}\n\nfunction removeProject(project) {\nwindow.localStorage.removeItem(project);\n}\n\nexport {\ngetCurrentProject,\ninitiateFirstProject,\nsaveCurrentProject,\nbuildProjectInfo,\nremoveProject\n};","import React from \"react\";\nimport \"../../../node_modules/font-awesome/css/font-awesome.min.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTimes,\n  faCheck\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction getCurrentProject(projectTitle) {\n    let currentProject = window.localStorage.getItem(projectTitle);\n    currentProject = JSON.parse(currentProject);\n    return currentProject;\n  }\n\nclass ProjectTask extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        isHover: false,\n        isHoveringComplete: false\n      };\n  \n      this.mouseHoverTaskContainerHandler = this.mouseHoverTaskContainerHandler.bind(\n        this\n      );\n      this.mouseHoverTaskCheckHandler = this.mouseHoverTaskCheckHandler.bind(\n        this\n      );\n      this.removeTaskFromProject = this.removeTaskFromProject.bind(this);\n      this.toggleTaskComplete = this.toggleTaskComplete.bind(this);\n    }\n  \n    mouseHoverTaskContainerHandler() {\n      const hovering = this.state.isHover;\n      this.setState({ isHover: !hovering });\n    }\n\n    mouseHoverTaskCheckHandler() {\n      const hovering = this.state.isHoveringComplete;\n      this.setState({ isHoveringComplete: !hovering });\n    }\n  \n    toggleTaskComplete() {\n      const projectDetails = getCurrentProject(this.props.projectTitle);\n      const currentProjectTasks = projectDetails.tasks;\n      const index = currentProjectTasks.findIndex(\n        task => task.title === this.props.taskTitle\n      );\n      const currentProjectTaskComplete = currentProjectTasks[index].complete;\n      currentProjectTasks[index].complete = !currentProjectTaskComplete;\n      projectDetails.tasks = currentProjectTasks;\n      this.props.addTaskToProjectHandler(this.props.title, projectDetails);\n      this.sendUpdatedTaskList(projectDetails);\n    }\n  \n    removeTaskFromProject() {\n      const projectDetails = getCurrentProject(this.props.projectTitle);\n      const currentProjectTasks = projectDetails.tasks;\n      const index = currentProjectTasks.findIndex(\n        task => task.title === this.props.taskTitle\n      );\n      currentProjectTasks.splice(index, 1);\n      projectDetails.tasks = currentProjectTasks;\n      this.sendUpdatedTaskList(projectDetails);\n    }\n  \n    sendUpdatedTaskList(projectDetails) {\n      this.props.addTaskToProjectHandler(this.props.title, projectDetails);\n      this.props.updateSelectedTasksHandler(this.props.projectTitle);\n    }\n  \n    render() {\n      let hoveringTask;\n      if (this.state.isHover) {\n        hoveringTask = (\n          <div className=\"task-detail\">{this.props.taskDescription}</div>\n        );\n      }\n  \n      let taskComplete;\n      if (this.props.taskComplete) {\n        taskComplete = (\n          <div>\n            <FontAwesomeIcon icon={faCheck} />\n          </div>\n        );\n      }\n  \n      return (\n        <div\n          className=\"task-container\"\n          onMouseEnter={this.mouseHoverTaskContainerHandler}\n          onMouseLeave={this.mouseHoverTaskContainerHandler}\n        >\n          <div>\n            <div className=\"task-quick\">\n              <div\n                className={\n                  this.props.taskComplete\n                    ? \"task-check-container complete-task\"\n                    : \"task-check-container\"\n                }\n                onClick={this.toggleTaskComplete}\n                onMouseEnter={this.mouseHoverTaskCheckHandler}\n                onMouseLeave={this.mouseHoverTaskCheckHandler}\n              >\n                {taskComplete}\n              </div>\n              <div className=\"task-title-container\">(Priority: {this.props.taskPriority}) {this.props.taskTitle}</div>\n              <div\n                className=\"task-remove-container\"\n                onClick={this.removeTaskFromProject}\n              >\n                <FontAwesomeIcon icon={faTimes} />\n              </div>\n            </div>\n          </div>\n          {hoveringTask}\n        </div>\n      );\n    }\n  }\n\n  export {ProjectTask}","import React from \"react\";\nimport \"../../node_modules/font-awesome/css/font-awesome.min.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCheck,\n  faPlusCircle,\n  faCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport {ProjectTask} from \"./project-task/ProjectTask.js\"\n\nfunction getCurrentProject(projectTitle) {\n  let currentProject = window.localStorage.getItem(projectTitle);\n  currentProject = JSON.parse(currentProject);\n  return currentProject;\n}\n\nvar randomID = function() {\n  return (\n    \"_\" +\n    Math.random()\n      .toString(36)\n      .substr(2, 9)\n  );\n};\n\n\n\nclass ProjectTaskList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      adding_task: false,\n      current_project: this.props.title,\n      tasks: this.props.selectedTasks\n    };\n    this.taskFormHandler = this.taskFormHandler.bind(this);\n    this.addTaskHandler = this.addTaskHandler.bind(this);\n  }\n\n  addTaskHandler = event => {\n    let taskTitle = document.getElementById(\"new-task-title\").value;\n    let taskDescription = document.getElementById(\"new-task-description\").value;\n    let taskPriority = document.getElementById(\"new-task-priority\").value;\n\n    const objMap = {\n      title: taskTitle,\n      description: taskDescription,\n      priority: taskPriority,\n      id: randomID(),\n      complete: false\n    };\n\n    const taskList = [...getCurrentProject(this.props.title).tasks];\n    event.preventDefault();\n    taskList.push(objMap);\n    const projectDetails = getCurrentProject(this.props.title);\n    projectDetails.tasks = taskList;\n    this.setState({ tasks: taskList });\n    this.props.addTaskToProjectHandler(this.props.title, projectDetails);\n    this.props.updateSelectedTasksHandler(this.props.title);\n    this.taskFormHandler();\n  };\n\n  taskFormHandler() {\n    const showForm = this.state.adding_task;\n    this.setState({ adding_task: !showForm });\n  }\n\n  render() {\n    let addTask;\n    if (this.state.adding_task) {\n      addTask = (\n        <div>\n          <div id=\"page-mask\" onClick={this.taskFormHandler}></div>\n          <div id=\"add-project-form\">\n            <form>\n              <ul>\n                <li>\n                  <label>Task Title:</label>\n                </li>\n                <li>\n                  <input type=\"text\" id=\"new-task-title\"></input>\n                </li>\n                <li>\n                  <label>Task Note:</label>\n                </li>\n                <li>\n                  <textarea rows={8} id=\"new-task-description\"></textarea>\n                </li>\n                <li>\n                  <label>Task Priority:</label>\n                </li>\n                <li>\n                  <select id=\"new-task-priority\">\n                    <option value=\"Low\">Low</option>\n                    <option value=\"Medium\">Medium</option>\n                    <option value=\"High\">High</option>\n                  </select>\n                </li>\n                <li id=\"submit-btn-container\">\n                  <input\n                    type=\"submit\"\n                    value=\"Create\"\n                    onClick={this.addTaskHandler}\n                  ></input>\n                  <input\n                    type=\"submit\"\n                    value=\"Cancel\"\n                    onClick={this.taskFormHandler}\n                  ></input>\n                </li>\n              </ul>\n            </form>\n          </div>\n        </div>\n      );\n    }\n    console.log(\"task list:\");\n    console.log(this.state.tasks);\n    let projectTasks;\n    if (this.props.selectedTasks) {\n      projectTasks = this.state.tasks.map((task, index) => (\n        <ProjectTask\n          updateSelectedTasksHandler={this.props.updateSelectedTasksHandler}\n          projectTitle={this.props.title}\n          taskTitle={task.title}\n          taskPriority={task.priority}\n          taskDescription={task.description}\n          taskComplete={task.complete}\n          addTaskToProjectHandler={this.props.addTaskToProjectHandler}\n          key={task.id}\n          taskID = {task.id}\n        />\n      ));\n    }\n\n    return (\n      <div id=\"task-list-container\">\n        <h3>\n          <div className=\"add-task\" onClick={this.taskFormHandler}>\n            <span className=\"fa-layers fa-fw\">\n              <FontAwesomeIcon className=\"circleIcon\" icon={faCircle} />\n              <FontAwesomeIcon className=\"plusIcon\" icon={faPlusCircle} />\n            </span>\n          </div>{\" \"}\n          Tasks\n        </h3>\n        {projectTasks}\n        {addTask}\n      </div>\n    );\n  }\n}\n\nclass ProjectDescription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current_project: this.props.title\n    };\n  }\n  render() {\n    return (\n      <div>\n        <h2 className=\"project-description\">{this.props.description}</h2>\n        <ProjectTaskList\n          selectedProjectDetail={this.props.selectedProjectDetail}\n          addTaskToProjectHandler={this.props.addTaskToProjectHandler}\n          title={this.props.title}\n          selectedTasks={this.props.selectedTasks}\n          updateSelectedTasksHandler={this.props.updateSelectedTasksHandler}\n        />\n      </div>\n    );\n  }\n}\n\nclass ProjectTitle extends React.Component {\n  render() {\n    return (\n      <div className=\"project-title\">\n        <h1>{this.props.title}</h1>\n        <hr></hr>\n      </div>\n    );\n  }\n}\n\nclass ProjectDetail extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current_project: getCurrentProject(this.props.selectedProject).title\n    };\n  }\n\n  toggleProjectComplete = () => {\n    const project = getCurrentProject(this.props.selectedProject);\n    const isProjectComplete = project.complete;\n    project.complete = !isProjectComplete;\n    this.props.toggleProjectComplete(this.props.selectedProject, project);\n  };\n\n  render() {\n    console.log(\"ProjectDetailTitle\");\n    console.log(this.props.selectedTasks);\n\n    let projectComplete;\n    if (getCurrentProject(this.props.selectedProject).complete) {\n      projectComplete = (\n        <div>\n          <FontAwesomeIcon icon={faCheck} />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"projectDetailFrame\">\n        <div\n          className={\n            getCurrentProject(this.props.selectedProject).complete\n              ? \"project-complete-container complete-project\"\n              : \"project-complete-container\"\n          }\n          onClick={this.toggleProjectComplete}\n        >\n          {projectComplete}\n        </div>\n        <ProjectTitle\n          title={getCurrentProject(this.props.selectedProject).title}\n        />\n        <ProjectDescription\n          description={\n            getCurrentProject(this.props.selectedProject).description\n          }\n          addTaskToProjectHandler={this.props.addTaskToProjectHandler}\n          title={getCurrentProject(this.props.selectedProject).title}\n          selectedTasks={this.props.selectedTasks}\n          updateSelectedTasksHandler={this.props.updateSelectedTasksHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport { ProjectDetail };\n","import React from \"react\";\nimport { getCurrentProject } from \"../localStorageProjects\";\nimport \"../../node_modules/font-awesome/css/font-awesome.min.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction removeProject(project) {\n  window.localStorage.removeItem(project);\n}\n\nclass ProjectList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null\n    };\n  }\n\n  deleteProjectHandler = (index, projectID) => {\n    removeProject(projectID);\n    const projects = [...this.props.data];\n    projects.splice(index, 1);\n    this.setState({ data: projects });\n  };\n\n  render() {\n    return (\n      <div className=\"projectListFrame\">\n        <CreateProject addNewProject={this.props.addProjectHandler} />\n        {this.props.data.map((project, index) => (\n          <ProjectListItem\n            project={project.title}\n            description={project.description}\n            complete={project.complete}\n            tasks={project.tasks}\n            key={project.id}\n            removeProjectHandler={this.props.removeProjectHandler}\n            selectedProject={this.props.selectedProject}\n            updateSelectedProject={this.props.updateSelectedProjectHandler}\n            updateSelectedTasksHandler={this.props.updateSelectedTasksHandler}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nclass ProjectListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = null;\n  }\n\n  render() {\n    let projectStatus = \"project-item\";\n    if (this.props.selectedProject === this.props.project) {\n      projectStatus += \" active-project\";\n    } else if (getCurrentProject(this.props.project).complete) {\n      projectStatus += \" project-tab-complete\";\n    }\n\n    return (\n      <div>\n        <div className={projectStatus}>\n          <div\n            className=\"remove-project-button\"\n            onClick={() => this.props.removeProjectHandler(this.props.project)}\n          >\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n          <div\n            className=\"project-item-text\"\n            onClick={() => {\n              this.props.updateSelectedProject(this.props.project);\n              this.props.updateSelectedTasksHandler(this.props.project);\n            }}\n          >\n            {this.props.project}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass CreateProject extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { adding_project: false };\n    this.projectFormHandler = this.projectFormHandler.bind(this);\n    this.projectAddHandler = this.projectAddHandler.bind(this);\n  }\n\n  projectFormHandler() {\n    const showForm = this.state.adding_project;\n    this.setState({ adding_project: !showForm });\n  }\n\n  projectAddHandler(event) {\n    const newProjectTitle = document.getElementById(\"new-project-title\").value;\n    const newProjectDescription = document.getElementById(\n      \"new-project-description\"\n    ).value;\n    this.projectFormHandler();\n    this.props.addNewProject(newProjectTitle, newProjectDescription);\n    event.preventDefault();\n  }\n\n  render() {\n    let addProject;\n    if (this.state.adding_project) {\n      addProject = (\n        <div>\n          <div id=\"page-mask\" onClick={this.projectFormHandler}></div>\n          <div id=\"add-project-form\">\n            <form>\n              <ul>\n                <li>\n                  <label>Project Title:</label>\n                </li>\n                <li>\n                  <input type=\"text\" id=\"new-project-title\"></input>\n                </li>\n                <li>\n                  <label>Project Description:</label>\n                </li>\n                <li>\n                  <textarea rows={8} id=\"new-project-description\"></textarea>\n                </li>\n                <li id=\"submit-btn-container\">\n                  <input\n                    type=\"submit\"\n                    value=\"Create\"\n                    onClick={this.projectAddHandler}\n                  ></input>\n                  <input\n                    type=\"submit\"\n                    value=\"Cancel\"\n                    onClick={this.projectFormHandler}\n                  ></input>\n                </li>\n              </ul>\n            </form>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {/* <div className='add-project' onClick = {this.props.click}>Add Project</div> */}\n        <div className=\"add-project\" onClick={this.projectFormHandler}>\n          Add Project\n        </div>\n        {addProject}\n      </div>\n    );\n  }\n}\n\nexport { ProjectList };","import React from \"react\";\n\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {\n  buildProjectInfo,\n  getCurrentProject,\n  saveCurrentProject,\n  initiateFirstProject\n} from \"./localStorageProjects.js\";\n\nimport \"./project-description/project-description.css\";\nimport { ProjectDetail } from \"./project-description/ProjectDescription.js\";\n\nimport { ProjectList } from \"./project-list/project-list.js\";\nimport \"./project-list/project-list.css\";\n\nvar randomID = function() {\n  return (\n    \"_\" +\n    Math.random()\n      .toString(36)\n      .substr(2, 9)\n  );\n};\n\nclass WindowFrame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: buildProjectInfo(),\n      selectedProject: initiateFirstProject(),\n      selectedTasks: getCurrentProject(initiateFirstProject()).tasks\n    };\n\n    this.updateSelectedProjectHandler = this.updateSelectedProjectHandler.bind(\n      this\n    );\n\n    this.updateTasksInProjectHandler = this.addTaskToProjectHandler.bind(this);\n\n    this.updateSelectedTasksHandler = this.updateSelectedTasksHandler.bind(\n      this\n    );\n    this.removeProjectHandler = this.removeProjectHandler.bind(this);\n    this.toggleProjectComplete = this.toggleProjectComplete.bind(this);\n  }\n\n  updateSelectedProjectHandler(projectID) {\n    this.setState({ selectedProject: projectID });\n  }\n\n  updateSelectedTasksHandler(projectID) {\n    const currentTasks = getCurrentProject(projectID).tasks;\n    this.setState({ selectedTasks: currentTasks });\n  }\n\n  addProjectHandler = (projectTitle, projectDescription) => {\n    const objMap = {\n      title: projectTitle,\n      description: projectDescription,\n      id: randomID(),\n      complete: false,\n      tasks: []\n    };\n    const projects = [...this.state.data];\n    projects.push(objMap);\n    saveCurrentProject(objMap);\n    this.setState({ data: projects });\n  };\n\n  addTaskToProjectHandler = (projectTitle, projectDetails) => {\n    const projects = [...this.state.data];\n    var index = projects.findIndex(project => project.title === projectTitle);\n    projects[index] = projectDetails;\n    saveCurrentProject(projectDetails);\n  };\n\n  toggleProjectComplete = (projectTitle, projectDetails) => {\n    const projects = [...this.state.data];\n    var index = projects.findIndex(project => project.title === projectTitle);\n    projects[index] = projectDetails;\n    saveCurrentProject(projectDetails);\n    this.setState({ data: projects });\n  };\n\n  removeProjectHandler = projectTitle => {\n    const projects = [...this.state.data];\n    const index = projects.findIndex(project => project.title === projectTitle);\n    projects.splice(index, 1);\n    console.log(initiateFirstProject());\n    window.localStorage.removeItem(projectTitle);\n    this.setState({\n      data: projects,\n      selectedProject: initiateFirstProject(),\n      selectedTasks: getCurrentProject(initiateFirstProject()).tasks\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"windowFrame\">\n        <ProjectList\n          data={this.state.data}\n          removeProjectHandler={this.removeProjectHandler}\n          selectedProject={this.state.selectedProject}\n          updateSelectedProjectHandler={this.updateSelectedProjectHandler}\n          updateSelectedTasksHandler={this.updateSelectedTasksHandler}\n          addProjectHandler={this.addProjectHandler}\n        />\n        <ProjectDetail\n          toggleProjectComplete={this.toggleProjectComplete}\n          selectedProject={this.state.selectedProject}\n          selectedTasks={this.state.selectedTasks}\n          addTaskToProjectHandler={this.addTaskToProjectHandler}\n          updateSelectedTasksHandler={this.updateSelectedTasksHandler}\n        />\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"headerFrame\">\n          <h1>\n            <i className=\"fa fa-pencil\"> </i> To Do Projects\n          </h1>\n        </div>\n        <WindowFrame />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n\n\n"],"sourceRoot":""}